var GenerateWordDocAjax = Class.create();
GenerateWordDocAjax.prototype = Object.extendsObject(AbstractAjaxProcessor,{
	/*initialize: function() {
	},*/
	
	generateDynWord: function(){
		var logger = '';
		var n = '\n';
		//receive passed data
		this.filename = this.getParameter('sysparm_file_name');
		this.sysid = this.getParameter('sysparm_sysid');
		this.source_table_name = this.getParameter('sysparm_table_name');
		//		gs.log('this.source_table_name '+this.source_table_name);
		//get attachment from export word table
		var exprt = new GlideRecord('u_export_to_word');
		exprt.addQuery('u_parent_table.name',this.source_table_name);
		exprt.query();
		//to read the attachment
		if(exprt.next()){
			this.export_sysid = exprt.sys_id;
			this.child_field_map = exprt.u_child_table_field_map;
		}
		this._setParentData();
		return this._setChildData();
		
	},
	
	_readUploadedAttachment: function(){
		var table_sys_id = this.export_sysid;
		//		gs.log('table_sys_id '+table_sys_id);
		var gr_atch = new GlideRecord('sys_attachment');
		gr_atch.addQuery('table_sys_id',table_sys_id);
		gr_atch.query();
		var atch_bytes = '';
		this.atch_str = '';
		var glide_atch = new GlideSysAttachment();
		if(gr_atch.next()){
			atch_bytes = glide_atch.getBytes(gr_atch);
			this.atch_str = String(Packages.java.lang.String(atch_bytes));
		}
		//		gs.print(gr_atch.file_name);
		var data_match_arr = this.atch_str.split(/<w:t>/ig);
		this.data_match_field_arr = [];
		for(i=0;i<data_match_arr.length-1;i++){
			this.data_match_field_arr.push(data_match_arr[i+1].split('</w:t>')[0]);
		}
		
		return this.data_match_field_arr;
	},
	
	_setParentData: function(){
		//setting parent data
		var parent_fld_arr = this._readUploadedAttachment();
		var grparent = new GlideRecord(this.source_table_name);
		grparent.get(this.sysid);
		//intialize with old value and then replace
		this.replaced_atch_str = this.atch_str;
		//		gs.log('grparent.number '+grparent.number);
		for(k=0;k<this.data_match_field_arr.length;k++){
			var lower = this.data_match_field_arr[k].toLowerCase();
			if(lower.indexOf('f_')==0){
				//				gs.log('K= '+k+' lower= '+lower);
				var fLess = lower.substr(2);
				//				gs.log('fLess '+fLess);
				this.replaced_atch_str = this.replaced_atch_str.replace(this.data_match_field_arr[k],grparent[fLess].getDisplayValue());
				
			}
		}
		this.parent_data_complete = this.replaced_atch_str;
		//parent data set complete
		return;
	},
	_setChildData: function(){
		//child data set - start
		var fixedformat = new StaticWordFormat(); // child fixed format class
		// will store all the mapping of child table fields - IMPORTANT
		var field_map ='';
		//exprt is called above
		field_map = this.child_field_map;
		var eachtable = '';
		//		gs.log('field_map '+field_map);
		if(field_map!=''){
			var arr = field_map.split(";");
			for(var i in arr){
				if(arr[i]!=''){
					//splitting the data to get required
					var worddata = [];
					var inr_arr = arr[i].split(":");
					var tid = inr_arr[0].split("=")[1];
					var fields = inr_arr[1].split("=")[1];
					
					var childdb = new GlideRecord("sys_db_object");
					childdb.get(tid);
					var childtable = '';
					childtable= childdb.name;
					var childtablelabel = childdb.label;
					
					var dic = new GlideRecord("sys_dictionary");
					dic.addEncodedQuery('column_label!=NULL^sys_idIN'+fields);
					dic.query();
					var fieldarray = [];
					while(dic.next()) {
						//getting the list of elements to be fetched from child tables
						fieldarray.push(dic.column_label+":splitbythis:"+dic.element);
					}
					// gs.log(fieldarray.toString());
					var repheader = '';
					var repdata = '';
					var eachdatarow = '';
					var each_headerrow = '';
					//get headers
					for(var i=0; i<fieldarray.length; i++ ){
						var tmparrayhead = fieldarray[i].split(':splitbythis:');
						repheader += fixedformat.header_cell.replace('<w:t>HEADER_DATA<\/w:t>','<w:t>'+tmparrayhead[0]+'<\/w:t>');
					}
					each_headerrow += fixedformat.header_row_start+repheader+fixedformat.header_row_end;
					// gs.log('each_headerrow '+each_headerrow);
					//get data
					var grchild = new GlideRecord(childtable);
					grchild.addQuery('parent', this.sysid);
					grchild.query();
					while (grchild.next()) {
						for(var i=0; i<fieldarray.length; i++ ){
							var tmparraydata = fieldarray[i].split(':splitbythis:');
							var col = tmparraydata[1];
							repdata += fixedformat.data_cell.replace('<w:t>DATA_CELL<\/w:t>','<w:t>'+grchild[col]+'<\/w:t>');
						}
						eachdatarow += fixedformat.data_row_start+repdata+fixedformat.data_row_end;
					}
					var whole_str = '';
					whole_str += fixedformat.table_label.replace('CHILD_TABLE_LABEL',childtablelabel);					
					whole_str += fixedformat.table_start;
					whole_str += fixedformat.table_property;
					// whole_str += fixedformat.header_row_start;
					whole_str += each_headerrow;//fixedformat.header_cell;
					// whole_str += fixedformat.header_row_end;
					// whole_str += fixedformat.data_row_start;
					whole_str += eachdatarow;//fixedformat.data_cell;
					// whole_str += fixedformat.data_row_end;
					whole_str += fixedformat.table_end;
					
					eachtable += whole_str;
					// gs.log('eachtable '+eachtable);
				}
			}
		}
		//		gs.log('eachtable '+eachtable);
		// gs.log('this.replaced_atch_str '+this.replaced_atch_str);
		
		//COALATE BOTH CHILD AND PARENT
		var firstindex = this.replaced_atch_str.lastIndexOf('<w:sectPr ');
		var lastindex = this.replaced_atch_str.lastIndexOf('</w:sectPr></w:body>');
		var sectPr = this.replaced_atch_str.substr(firstindex,lastindex-firstindex);
		//		gs.log('sectPr \n'+sectPr);
		
		this.replaced_worddata = this.replaced_atch_str.substr(0,firstindex)+eachtable+sectPr+this.replaced_atch_str.substr(lastindex);
		//		 gs.log(this.final_word_string,'MSWORD');
		
		return this._insertAttach();
	},
	_insertAttach: function(){
		
		// gs.log('inside insert attach ');
		var some_data =  new Packages.java.lang.String(this.replaced_worddata);
		var value = some_data.getBytes();
		var tableName = this.source_table_name;//'pm_project';
		var sys_id = this.sysid;
		var filename = this.filename+'.doc';
		var content_type = 'application/msword';
		var attachment = new Attachment();
		attachment.write(tableName, sys_id, filename, content_type, value);
		var returnid='';
		var gratch = new GlideRecord("sys_attachment");
		gratch.addQuery("table_sys_id", sys_id);
		gratch.addQuery('sys_created_by',gs.getUserName());
		gratch.orderByDesc('sys_created_on');
		gratch.query();
		if (gratch.next()) {
			returnid = gratch.sys_id;
		}
		
		return returnid;
	},
	
	type: 'GenerateWordDocAjax'
});
